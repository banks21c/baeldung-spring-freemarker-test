<!DOCTYPE html>
<html>
<head>
<meta charset="EUC-KR">
<title>Insert title here</title>
<link rel="stylesheet" type="text/css" href="/resources/css">
<link rel="stylesheet" type="text/css" href="/resources/docgen.min.css">
</head>
<body>
<#-- content area -->
<div class="page-content">
 <div class="page-title">
  <div class="pagers top">
   <a class="paging-arrow previous" href="ref_directive_flush.html"><span>Previous</span></a>
   <a class="paging-arrow next" href="ref_directive_function.html"><span>Next</span></a>
  </div>
  <div class="title-wrapper"> 
   <h1 class="content-header header-section1" id="ref_directive_ftl" itemprop="headline">ftl</h1> 
  </div>
 </div>
 <div class="page-menu"> 
  <div class="page-menu-title">
   Page Contents
  </div> 
  <ul>
   <li><a class="page-menu-link" href="#autoid_90" data-menu-target="autoid_90">Synopsis</a></li>
   <li><a class="page-menu-link" href="#autoid_91" data-menu-target="autoid_91">Description</a></li>
  </ul> 
 </div>
 <a name="ref.directive.ftl"></a> 
 <h2 class="content-header header-section2" id="autoid_90">Synopsis</h2> 
 <pre class="metaTemplate"><code class="inline-code">&lt;#ftl <em class="code-color">param1</em>=<em class="code-color">value1</em> <em class="code-color">param2</em>=<em class="code-color">value2</em> <em class="code-color">...</em> <em class="code-color">paramN</em>=<em class="code-color">valueN</em>&gt;</code>
</pre> 
 <p>Where:</p> 
 <ul> 
  <li> <code class="inline-code"><em class="code-color">param1</em></code>, <code class="inline-code"><em class="code-color">param2</em></code>, ...etc.: Name of the parameter. Not an expression. Allowed parameters are: <code class="inline-code">encoding</code>, <code class="inline-code">strip_whitespace</code>, <code class="inline-code">strip_text</code>, ...etc. See below. </li> 
  <li> <code class="inline-code"><em class="code-color">value1</em></code>, <code class="inline-code"><em class="code-color">value2</em></code>, ...etc.: The value of parameter. This must be a constant expression (as <code class="inline-code">true</code>, or <code class="inline-code">"ISO-8859-5"</code>, or <code class="inline-code">{x:1, y:2}</code>). It can't use variables. </li> 
 </ul> 
 <h2 class="content-header header-section2" id="autoid_91">Description</h2> 
 <p>Tells information about the template for FreeMarker and for other tools, also helps programs to automatically detect if a text file is an FTL file. This directive, if present, must be the very first thing in the template. Any <a href="gloss.html#gloss.whiteSpace">white-space</a> before this directive will be ignored. The old-syntax (<code class="inline-code">#</code>-less) format of this directive is not supported.</p> 
 <p>The settings (encoding, white-space stripping, etc.) given here has the highest precedence, that is, they will be used for the template regardless of any FreeMarker configuration settings.</p> 
 <p>Possible parameters:</p> 
 <ul> 
  <li> <p><code class="inline-code">attributes</code>: This is a hash that associates arbitrary attributes (name-value pairs) to the template. The values of the attributes can be of any type (string, number, sequence... etc.). FreeMarker doesn't try to understand the meaning of the attributes. It's up to the application that encapsulates FreeMarker (as a Web application framework). Thus, the set of allowed attributes and their semantic is application (Web application framework) dependent. <span class="marked-for-programmers">Programmers: you can get the attributes associated with a <code class="inline-code">Template</code> object with its <code class="inline-code">getCustomAttributeNames</code> and <code class="inline-code">getCustomAttribute</code> methods (inherited from <code class="inline-code">freemarker.core.Configurable</code>). As the template attributes are associated with the <code class="inline-code">Template</code> object when the template is parsed, the attributes can be read anytime, the template need not be executed. The methods mentioned return the attribute values unwrapped, that is, with FreeMarker independent type as <code class="inline-code">java.util.List</code>.</span></p> </li> 
  <li> <p><code class="inline-code">auto_esc</code>: A boolean constant to turn <a href="dgui_misc_autoescaping.html">auto-escaping</a> on or off. It depends on the <code class="inline-code">auto_escaping_policy</code> of the FreeMarker configuration, but usually auto-escaping will be by default on, if the current <a href="dgui_misc_autoescaping.html#dgui_misc_autoescaping_outputformat">output format</a> uses auto-escaping by default. So you mostly use this to disable auto-escaping (<code class="inline-code">false</code> value). An attempt to use <code class="inline-code">true</code> value when the current output format is a <a href="dgui_misc_autoescaping.html#dgui_misc_autoescaping_nonmarkupof">non-markup output format</a> (which hence can't escape) will cause <a href="gloss.html#gloss.parseTimeError">parse-time error</a>. Note that you can turn auto-escaping on/off for only a part of the template with the <a href="ref_directive_autoesc.html"><code>autoesc</code></a> and <a href="ref_directive_noautoesc.html"><code>noautoesc</code> directives</a>.</p> </li> 
  <li> <p><code class="inline-code">encoding</code>: With this you can specify the encoding (charset) of the template in the template file itself. <span class="marked-for-programmers">(That is, this will be the <code class="inline-code">encoding</code> setting of the newly created <code class="inline-code">Template</code>, and not even the <code class="inline-code">encoding</code> parameter to <code class="inline-code">Configuration.getTemplate</code> can override it)</span>. Note however, that FreeMarker will try to find and interpret the <code class="inline-code">ftl</code> directive first with the automatically guessed encoding (which depends on the FreeMarker configuration set by the programmers), and only then realizes if the <code class="inline-code">ftl</code> directive dictates something different, and re-read the template with the new encoding. Thus, the template must be valid FTL until the end of <code class="inline-code">ftl</code> tag with the encoding tried first. The valid values of this parameter are MIME-preferred charset names from the IANA Charset Registry, like ISO-8859-5, UTF-8 or Shift_JIS.</p> </li> 
  <li> <p><code class="inline-code">ns_prefixes</code>: This is a hash that associates prefixes with node namespaces. For example: <code class="inline-code">{"e":"http://example.com/ebook", "vg":"http://example.com/vektorGraphics"}</code>. This is mostly used with XML processing where the prefixes can be used in XML queries, but it also influences the working of <a href="ref_directive_visit.html">directives <code>visit</code> and <code>recurse</code></a>. Only one prefix can be registered for the same node namespace (otherwise an error will occur), so there is one-to-one relation between prefixes and node namespaces. Prefixes <code class="inline-code">D</code> and <code class="inline-code">N</code> are reserved. If you register prefix <code class="inline-code">D</code>, then other than you associate the node namespace with prefix <code class="inline-code">D</code>, you also set the default node namespace. Prefix <code class="inline-code">N</code> can't be registered; it is used to denote nodes with no node namespace in certain places, when (and only when) prefix <code class="inline-code">D</code> is registered. (To see the usage of default node namespace, <code class="inline-code">N</code>, and prefixes in general, see the part about <a href="xgui.html">XML processing</a> and <a href="ref_directive_visit.html"><code>visit</code> and <code>recurse</code></a> in the reference.) The effect of <code class="inline-code">ns_prefixes</code> is limited to a single <a href="dgui_misc_namespace.html">FTL namespace</a>, namely, to the FTL namespace that was created for the template. This also means that <code class="inline-code">ns_prefixes</code> has effect only when an FTL namespace is created for the template that contains it, otherwise the <code class="inline-code">ns_prefixes</code> parameter has no effect. An FTL namespace is made for a template when: (a) the template is the "main" template, that is, it is not invoked as a result of an <code class="inline-code">&lt;#include ...&gt;</code>, but it is directly invoked (<span class="marked-for-programmers">with the <code class="inline-code">process</code> Java method of class <code class="inline-code">Template</code> or <code class="inline-code">Environment</code></span>); (b) the template is invoked directly with <code class="inline-code">&lt;#import ...&gt;</code>.</p> </li> 
  <li> <p><code class="inline-code">output_format</code>: Specifies the <a href="dgui_misc_autoescaping.html#dgui_misc_autoescaping_outputformat">output format</a> of this template. This must be a string literal, which refers to the name of the output format. See the <a href="dgui_misc_autoescaping.html#topic.predefinedOutputFormats">table of predefined output formats here</a>. Other names can exist if the programmers has added them via the <code class="inline-code">registered_custom_output_formats</code> configuration setting (<code class="inline-code">Configuration.setRegisteredCustomOutputFormats(<em class="code-color">...</em>)</code>). The referred output format must be known by the <code class="inline-code">Configuration</code>, or else a <a href="gloss.html#gloss.parseTimeError">parse-time error </a>will occur. The name can also refer to a so called combined output format as <code class="inline-code">"<em class="code-color">outerFormatName</em>{<em class="code-color">innerFormatName</em>}"</code>; <a href="ref_directive_outputformat.html#topic.combinedOutputFormats">see more about combined output formats here</a>.</p> </li> 
  <li> <p><code class="inline-code">strict_syntax</code>: This turns on/off "strict syntax", which is the standard syntax after FreeMarker 2.1. Valid values are the boolean constants <code class="inline-code">true</code> and <code class="inline-code">false</code>. (And for backward compatibility, strings <code class="inline-code">"yes"</code>, <code class="inline-code">"no"</code>, <code class="inline-code">"true"</code>, <code class="inline-code">"false"</code>). The default value (i.e., when you don't use this parameter) depends on the FreeMarker configuration set by the programmers, but it's most certainly set to <code class="inline-code">true</code>. For more information read: <a href="ref_depr_oldsyntax.html">Deprecated FTL constructs/Old FTL syntax</a></p> </li> 
  <li> <p><code class="inline-code">strip_text</code>: When enabled, all top-level text in a template is removed when the template is parsed. This does not affect text within macros, directives, or interpolations. Valid values are the boolean constants <code class="inline-code">true</code> and <code class="inline-code">false</code>. (And for backward compatibility, strings <code class="inline-code">"yes"</code>, <code class="inline-code">"no"</code>, <code class="inline-code">"true"</code>, <code class="inline-code">"false"</code>). The default value (i.e. when you don't use this parameter) is <code class="inline-code">false</code>.</p> </li> 
  <li> <p><code class="inline-code">strip_whitespace</code>: This enables/disables <a href="dgui_misc_whitespace.html#dgui_misc_whitespace_stripping">white-space stripping</a>. Valid values are the boolean constants <code class="inline-code">true</code> and <code class="inline-code">false</code>. (And for backward compatibility, strings <code class="inline-code">"yes"</code>, <code class="inline-code">"no"</code>, <code class="inline-code">"true"</code>, <code class="inline-code">"false"</code>). The default value (i.e. when you don't use this parameter) depends on the FreeMarker configuration set by the programmers, but it should be <code class="inline-code">true</code> for new projects.</p> </li> 
 </ul> 
 <div class="callout note"> 
  <strong class="callout-label">Note:</strong> 
  <p>As of FreeMarker 2.3.23, you can use camel case instead of snake case for parameter names, like <code class="inline-code">outputFormat</code> instead of <code class="inline-code">output_format</code>. But know that then within the same template, FreeMarker will enforce the usage of camel case for all identifiers that are part of the template language (user defined names are not affected).</p> 
 </div> 
 <p>This directive also determines if the template uses angle bracket syntax (e.g. <code class="inline-code">&lt;#include 'foo.ftl'&gt;</code>) or <a href="dgui_misc_alternativesyntax.html">square bracket syntax</a> (e.g. <code class="inline-code">[#include 'foo.ftl']</code>). Simply, the syntax used for this directive will be the syntax used for the whole template, regardless of the FreeMarker configuration settings.</p> 

</div>
</body>
</html>
